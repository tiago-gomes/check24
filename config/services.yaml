services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\Domain\:
        resource: '../src/Domain/*'
        exclude: '../src/Domain/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Domain\Controller\:
        resource: '../src/Domain/Controller'
        tags: ['controller.service_arguments']

    # Repositories Services
    App\Domain\Model\Repository\Contract\UserRepositoryInterface:
        public: true
        factory: ['App\Domain\Model\Repository\Factory\UserRepositoryFactory', service]

    App\Domain\Model\Repository\Contract\CommentRepositoryInterface:
        public: true
        factory: ['App\Domain\Model\Repository\Factory\CommentRepositoryFactory', service]

    App\Domain\Model\Repository\Contract\PostRepositoryInterface:
        public: true
        factory: ['App\Domain\Model\Repository\Factory\PostRepositoryFactory', service]
